{"version":3,"file":"CheckboxForm2.stories-38d50019.js","sources":["../../src/components/CheckboxForm2.tsx"],"sourcesContent":["\"use client\";\n\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useForm } from \"react-hook-form\";\nimport * as z from \"zod\";\n\nimport { Button } from \"./Button\";\nimport { Checkbox } from \"./Checkbox\";\nimport {\n  FormProvider,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"./Form.primitives\";\nimport { toast } from \"./Toast.hooks\";\n\nconst items = [\n  {\n    id: \"recents\",\n    label: \"Recents\",\n  },\n  {\n    id: \"home\",\n    label: \"Home\",\n  },\n  {\n    id: \"applications\",\n    label: \"Applications\",\n  },\n  {\n    id: \"desktop\",\n    label: \"Desktop\",\n  },\n  {\n    id: \"downloads\",\n    label: \"Downloads\",\n  },\n  {\n    id: \"documents\",\n    label: \"Documents\",\n  },\n] as const;\n\nconst FormSchema = z.object({\n  items: z.array(z.string()).refine((value) => value.some((item) => item), {\n    message: \"You have to select at least one item.\",\n  }),\n});\n\ntype Schema = z.infer<typeof FormSchema>;\n\nexport function CheckboxForm2() {\n  const form = useForm<Schema>({\n    resolver: zodResolver(FormSchema),\n    defaultValues: {\n      items: [\"recents\", \"home\"],\n    },\n  });\n\n  function onSubmit(data: Schema) {\n    toast({\n      title: \"You submitted the following values:\",\n      description: (\n        <pre className=\"mt-2 w-[340px] rounded-md bg-slate-950 p-4\">\n          <code className=\"text-white\">{JSON.stringify(data, null, 2)}</code>\n        </pre>\n      ),\n    });\n  }\n\n  return (\n    <FormProvider {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-8\">\n        <FormField\n          control={form.control}\n          name=\"items\"\n          render={() => (\n            <FormItem>\n              <div className=\"mb-4\">\n                <FormLabel className=\"text-base\">Sidebar</FormLabel>\n                <FormDescription>\n                  Select the items you want to display in the sidebar.\n                </FormDescription>\n              </div>\n              {items.map((item) => (\n                <FormField\n                  key={item.id}\n                  control={form.control}\n                  name=\"items\"\n                  render={({ field }) => {\n                    return (\n                      <FormItem\n                        key={item.id}\n                        className=\"flex flex-row items-start space-x-3 space-y-0\"\n                      >\n                        <FormControl>\n                          <Checkbox\n                            checked={field.value?.includes(item.id)}\n                            onCheckedChange={(checked) => {\n                              return checked\n                                ? field.onChange([...field.value, item.id])\n                                : field.onChange(\n                                    field.value?.filter(\n                                      (value) => value !== item.id\n                                    )\n                                  );\n                            }}\n                          />\n                        </FormControl>\n                        <FormLabel className=\"font-normal\">\n                          {item.label}\n                        </FormLabel>\n                      </FormItem>\n                    );\n                  }}\n                />\n              ))}\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n        <Button type=\"submit\">Submit</Button>\n      </form>\n    </FormProvider>\n  );\n}\n"],"names":["items","FormSchema","z.object","z.array","z.string","value","item","CheckboxForm2","form","useForm","zodResolver","onSubmit","data","toast","jsx","FormProvider","jsxs","FormField","FormItem","FormLabel","FormDescription","field","FormControl","Checkbox","_a","checked","FormMessage","Button"],"mappings":"q0BAmBA,MAAMA,EAAQ,CACZ,CACE,GAAI,UACJ,MAAO,SACT,EACA,CACE,GAAI,OACJ,MAAO,MACT,EACA,CACE,GAAI,eACJ,MAAO,cACT,EACA,CACE,GAAI,UACJ,MAAO,SACT,EACA,CACE,GAAI,YACJ,MAAO,WACT,EACA,CACE,GAAI,YACJ,MAAO,WACT,CACF,EAEMC,EAAaC,EAAS,CAC1B,MAAOC,EAAQC,EAAU,CAAA,EAAE,OAAQC,GAAUA,EAAM,KAAMC,GAASA,CAAI,EAAG,CACvE,QAAS,uCAAA,CACV,CACH,CAAC,EAIM,SAASC,GAAgB,CAC9B,MAAMC,EAAOC,EAAgB,CAC3B,SAAUC,EAAYT,CAAU,EAChC,cAAe,CACb,MAAO,CAAC,UAAW,MAAM,CAC3B,CAAA,CACD,EAED,SAASU,EAASC,EAAc,CACxBC,EAAA,CACJ,MAAO,sCACP,YACEC,EAAAA,IAAC,MAAI,CAAA,UAAU,6CACb,SAACA,EAAA,IAAA,OAAA,CAAK,UAAU,aAAc,cAAK,UAAUF,EAAM,KAAM,CAAC,CAAE,CAAA,EAC9D,CAAA,CAEH,CACH,CAEA,OACGE,EAAAA,IAAAC,EAAA,CAAc,GAAGP,EAChB,SAACQ,EAAAA,KAAA,OAAA,CAAK,SAAUR,EAAK,aAAaG,CAAQ,EAAG,UAAU,YACrD,SAAA,CAAAG,EAAA,IAACG,EAAA,CACC,QAAST,EAAK,QACd,KAAK,QACL,OAAQ,IACNQ,EAAAA,KAACE,EACC,CAAA,SAAA,CAACF,EAAAA,KAAA,MAAA,CAAI,UAAU,OACb,SAAA,CAACF,EAAA,IAAAK,EAAA,CAAU,UAAU,YAAY,SAAO,UAAA,EACxCL,EAAAA,IAACM,GAAgB,SAEjB,sDAAA,CAAA,CAAA,EACF,EACCpB,EAAM,IAAKM,GACVQ,EAAA,IAACG,EAAA,CAEC,QAAST,EAAK,QACd,KAAK,QACL,OAAQ,CAAC,CAAE,MAAAa,KAAY,OAEnB,OAAAL,EAAA,KAACE,EAAA,CAEC,UAAU,gDAEV,SAAA,CAAAJ,MAACQ,EACC,CAAA,SAAAR,EAAA,IAACS,EAAA,CACC,SAASC,EAAAH,EAAM,QAAN,YAAAG,EAAa,SAASlB,EAAK,IACpC,gBAAkBmB,GAAY,OACrB,OAAAA,EACHJ,EAAM,SAAS,CAAC,GAAGA,EAAM,MAAOf,EAAK,EAAE,CAAC,EACxCe,EAAM,UACJG,EAAAH,EAAM,QAAN,YAAAG,EAAa,OACVnB,GAAUA,IAAUC,EAAK,GAC5B,CAER,CAAA,CAAA,EAEJ,EACCQ,EAAA,IAAAK,EAAA,CAAU,UAAU,cAClB,WAAK,MACR,CAAA,CAAA,EAnBKb,EAAK,EAAA,CAsBhB,CAAA,EA5BKA,EAAK,EAAA,CA8Bb,QACAoB,EAAY,EAAA,CAAA,EACf,CAAA,CAEJ,EACCZ,EAAA,IAAAa,EAAA,CAAO,KAAK,SAAS,SAAM,SAAA,CAAA,CAC9B,CAAA,CACF,CAAA,CAEJ"}